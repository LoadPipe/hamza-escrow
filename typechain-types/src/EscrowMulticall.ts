/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export type MulticallPaymentInputStruct = {
  contractAddress: AddressLike;
  currency: AddressLike;
  id: BytesLike;
  receiver: AddressLike;
  payer: AddressLike;
  amount: BigNumberish;
};

export type MulticallPaymentInputStructOutput = [
  contractAddress: string,
  currency: string,
  id: string,
  receiver: string,
  payer: string,
  amount: bigint
] & {
  contractAddress: string;
  currency: string;
  id: string;
  receiver: string;
  payer: string;
  amount: bigint;
};

export interface EscrowMulticallInterface extends Interface {
  getFunction(nameOrSignature: "multipay"): FunctionFragment;

  encodeFunctionData(
    functionFragment: "multipay",
    values: [MulticallPaymentInputStruct[]]
  ): string;

  decodeFunctionResult(functionFragment: "multipay", data: BytesLike): Result;
}

export interface EscrowMulticall extends BaseContract {
  connect(runner?: ContractRunner | null): EscrowMulticall;
  waitForDeployment(): Promise<this>;

  interface: EscrowMulticallInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  multipay: TypedContractMethod<
    [payments: MulticallPaymentInputStruct[]],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "multipay"
  ): TypedContractMethod<
    [payments: MulticallPaymentInputStruct[]],
    [void],
    "payable"
  >;

  filters: {};
}
