/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener,
} from 'ethers';
import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod,
} from '../common';

export type PaymentInputStruct = {
    id: BytesLike;
    receiver: AddressLike;
    payer: AddressLike;
    amount: BigNumberish;
};

export type PaymentInputStructOutput = [
    id: string,
    receiver: string,
    payer: string,
    amount: bigint,
] & { id: string; receiver: string; payer: string; amount: bigint };

export type MultiPaymentInputStruct = {
    currency: AddressLike;
    payments: PaymentInputStruct[];
};

export type MultiPaymentInputStructOutput = [
    currency: string,
    payments: PaymentInputStructOutput[],
] & { currency: string; payments: PaymentInputStructOutput[] };

export interface PaymentEscrowInterface extends Interface {
    getFunction(
        nameOrSignature:
            | 'ADMIN_ROLE'
            | 'APPROVER_ROLE'
            | 'ARBITER_ROLE'
            | 'PAUSER_ROLE'
            | 'REFUNDER_ROLE'
            | 'SYSTEM_ROLE'
            | 'UPGRADER_ROLE'
            | 'placeMultiPayments'
            | 'refundPayment'
            | 'releaseEscrow'
            | 'releaseEscrowOnBehalfOfPayer'
            | 'securityContext'
            | 'setSecurityContext'
            | 'setVaultAddress'
            | 'vaultAddress'
    ): FunctionFragment;

    getEvent(
        nameOrSignatureOrTopic:
            | 'PaymentReceived'
            | 'PaymentSweepFailed'
            | 'PaymentSwept'
            | 'SecurityContextSet'
            | 'VaultAddressChanged'
    ): EventFragment;

    encodeFunctionData(
        functionFragment: 'ADMIN_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'APPROVER_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'ARBITER_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'PAUSER_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'REFUNDER_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'SYSTEM_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'UPGRADER_ROLE',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'placeMultiPayments',
        values: [MultiPaymentInputStruct[]]
    ): string;
    encodeFunctionData(
        functionFragment: 'refundPayment',
        values: [BytesLike, BigNumberish]
    ): string;
    encodeFunctionData(
        functionFragment: 'releaseEscrow',
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: 'releaseEscrowOnBehalfOfPayer',
        values: [BytesLike]
    ): string;
    encodeFunctionData(
        functionFragment: 'securityContext',
        values?: undefined
    ): string;
    encodeFunctionData(
        functionFragment: 'setSecurityContext',
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: 'setVaultAddress',
        values: [AddressLike]
    ): string;
    encodeFunctionData(
        functionFragment: 'vaultAddress',
        values?: undefined
    ): string;

    decodeFunctionResult(
        functionFragment: 'ADMIN_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'APPROVER_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'ARBITER_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'PAUSER_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'REFUNDER_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'SYSTEM_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'UPGRADER_ROLE',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'placeMultiPayments',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'refundPayment',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'releaseEscrow',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'releaseEscrowOnBehalfOfPayer',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'securityContext',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'setSecurityContext',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'setVaultAddress',
        data: BytesLike
    ): Result;
    decodeFunctionResult(
        functionFragment: 'vaultAddress',
        data: BytesLike
    ): Result;
}

export namespace PaymentReceivedEvent {
    export type InputTuple = [
        paymentId: BytesLike,
        to: AddressLike,
        from: AddressLike,
        currency: AddressLike,
        amount: BigNumberish,
    ];
    export type OutputTuple = [
        paymentId: string,
        to: string,
        from: string,
        currency: string,
        amount: bigint,
    ];
    export interface OutputObject {
        paymentId: string;
        to: string;
        from: string;
        currency: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSweepFailedEvent {
    export type InputTuple = [
        paymentId: BytesLike,
        currency: AddressLike,
        amount: BigNumberish,
    ];
    export type OutputTuple = [
        paymentId: string,
        currency: string,
        amount: bigint,
    ];
    export interface OutputObject {
        paymentId: string;
        currency: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace PaymentSweptEvent {
    export type InputTuple = [
        paymentId: BytesLike,
        currency: AddressLike,
        amount: BigNumberish,
    ];
    export type OutputTuple = [
        paymentId: string,
        currency: string,
        amount: bigint,
    ];
    export interface OutputObject {
        paymentId: string;
        currency: string;
        amount: bigint;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace SecurityContextSetEvent {
    export type InputTuple = [
        caller: AddressLike,
        securityContext: AddressLike,
    ];
    export type OutputTuple = [caller: string, securityContext: string];
    export interface OutputObject {
        caller: string;
        securityContext: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export namespace VaultAddressChangedEvent {
    export type InputTuple = [newAddress: AddressLike, changedBy: AddressLike];
    export type OutputTuple = [newAddress: string, changedBy: string];
    export interface OutputObject {
        newAddress: string;
        changedBy: string;
    }
    export type Event = TypedContractEvent<
        InputTuple,
        OutputTuple,
        OutputObject
    >;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
}

export interface PaymentEscrow extends BaseContract {
    connect(runner?: ContractRunner | null): PaymentEscrow;
    waitForDeployment(): Promise<this>;

    interface: PaymentEscrowInterface;

    queryFilter<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        fromBlockOrBlockhash?: string | number | undefined,
        toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;

    on<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    once<TCEvent extends TypedContractEvent>(
        event: TCEvent,
        listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
        filter: TypedDeferredTopicFilter<TCEvent>,
        listener: TypedListener<TCEvent>
    ): Promise<this>;

    listeners<TCEvent extends TypedContractEvent>(
        event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
        event?: TCEvent
    ): Promise<this>;

    ADMIN_ROLE: TypedContractMethod<[], [string], 'view'>;

    APPROVER_ROLE: TypedContractMethod<[], [string], 'view'>;

    ARBITER_ROLE: TypedContractMethod<[], [string], 'view'>;

    PAUSER_ROLE: TypedContractMethod<[], [string], 'view'>;

    REFUNDER_ROLE: TypedContractMethod<[], [string], 'view'>;

    SYSTEM_ROLE: TypedContractMethod<[], [string], 'view'>;

    UPGRADER_ROLE: TypedContractMethod<[], [string], 'view'>;

    placeMultiPayments: TypedContractMethod<
        [multiPayments: MultiPaymentInputStruct[]],
        [void],
        'payable'
    >;

    refundPayment: TypedContractMethod<
        [paymentId: BytesLike, amount: BigNumberish],
        [void],
        'nonpayable'
    >;

    releaseEscrow: TypedContractMethod<
        [paymentId: BytesLike],
        [void],
        'nonpayable'
    >;

    releaseEscrowOnBehalfOfPayer: TypedContractMethod<
        [paymentId: BytesLike],
        [void],
        'nonpayable'
    >;

    securityContext: TypedContractMethod<[], [string], 'view'>;

    setSecurityContext: TypedContractMethod<
        [_securityContext: AddressLike],
        [void],
        'nonpayable'
    >;

    setVaultAddress: TypedContractMethod<
        [_vaultAddress: AddressLike],
        [void],
        'nonpayable'
    >;

    vaultAddress: TypedContractMethod<[], [string], 'view'>;

    getFunction<T extends ContractMethod = ContractMethod>(
        key: string | FunctionFragment
    ): T;

    getFunction(
        nameOrSignature: 'ADMIN_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'APPROVER_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'ARBITER_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'PAUSER_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'REFUNDER_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'SYSTEM_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'UPGRADER_ROLE'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'placeMultiPayments'
    ): TypedContractMethod<
        [multiPayments: MultiPaymentInputStruct[]],
        [void],
        'payable'
    >;
    getFunction(
        nameOrSignature: 'refundPayment'
    ): TypedContractMethod<
        [paymentId: BytesLike, amount: BigNumberish],
        [void],
        'nonpayable'
    >;
    getFunction(
        nameOrSignature: 'releaseEscrow'
    ): TypedContractMethod<[paymentId: BytesLike], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'releaseEscrowOnBehalfOfPayer'
    ): TypedContractMethod<[paymentId: BytesLike], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'securityContext'
    ): TypedContractMethod<[], [string], 'view'>;
    getFunction(
        nameOrSignature: 'setSecurityContext'
    ): TypedContractMethod<
        [_securityContext: AddressLike],
        [void],
        'nonpayable'
    >;
    getFunction(
        nameOrSignature: 'setVaultAddress'
    ): TypedContractMethod<[_vaultAddress: AddressLike], [void], 'nonpayable'>;
    getFunction(
        nameOrSignature: 'vaultAddress'
    ): TypedContractMethod<[], [string], 'view'>;

    getEvent(
        key: 'PaymentReceived'
    ): TypedContractEvent<
        PaymentReceivedEvent.InputTuple,
        PaymentReceivedEvent.OutputTuple,
        PaymentReceivedEvent.OutputObject
    >;
    getEvent(
        key: 'PaymentSweepFailed'
    ): TypedContractEvent<
        PaymentSweepFailedEvent.InputTuple,
        PaymentSweepFailedEvent.OutputTuple,
        PaymentSweepFailedEvent.OutputObject
    >;
    getEvent(
        key: 'PaymentSwept'
    ): TypedContractEvent<
        PaymentSweptEvent.InputTuple,
        PaymentSweptEvent.OutputTuple,
        PaymentSweptEvent.OutputObject
    >;
    getEvent(
        key: 'SecurityContextSet'
    ): TypedContractEvent<
        SecurityContextSetEvent.InputTuple,
        SecurityContextSetEvent.OutputTuple,
        SecurityContextSetEvent.OutputObject
    >;
    getEvent(
        key: 'VaultAddressChanged'
    ): TypedContractEvent<
        VaultAddressChangedEvent.InputTuple,
        VaultAddressChangedEvent.OutputTuple,
        VaultAddressChangedEvent.OutputObject
    >;

    filters: {
        'PaymentReceived(bytes32,address,address,address,uint256)': TypedContractEvent<
            PaymentReceivedEvent.InputTuple,
            PaymentReceivedEvent.OutputTuple,
            PaymentReceivedEvent.OutputObject
        >;
        PaymentReceived: TypedContractEvent<
            PaymentReceivedEvent.InputTuple,
            PaymentReceivedEvent.OutputTuple,
            PaymentReceivedEvent.OutputObject
        >;

        'PaymentSweepFailed(bytes32,address,uint256)': TypedContractEvent<
            PaymentSweepFailedEvent.InputTuple,
            PaymentSweepFailedEvent.OutputTuple,
            PaymentSweepFailedEvent.OutputObject
        >;
        PaymentSweepFailed: TypedContractEvent<
            PaymentSweepFailedEvent.InputTuple,
            PaymentSweepFailedEvent.OutputTuple,
            PaymentSweepFailedEvent.OutputObject
        >;

        'PaymentSwept(bytes32,address,uint256)': TypedContractEvent<
            PaymentSweptEvent.InputTuple,
            PaymentSweptEvent.OutputTuple,
            PaymentSweptEvent.OutputObject
        >;
        PaymentSwept: TypedContractEvent<
            PaymentSweptEvent.InputTuple,
            PaymentSweptEvent.OutputTuple,
            PaymentSweptEvent.OutputObject
        >;

        'SecurityContextSet(address,address)': TypedContractEvent<
            SecurityContextSetEvent.InputTuple,
            SecurityContextSetEvent.OutputTuple,
            SecurityContextSetEvent.OutputObject
        >;
        SecurityContextSet: TypedContractEvent<
            SecurityContextSetEvent.InputTuple,
            SecurityContextSetEvent.OutputTuple,
            SecurityContextSetEvent.OutputObject
        >;

        'VaultAddressChanged(address,address)': TypedContractEvent<
            VaultAddressChangedEvent.InputTuple,
            VaultAddressChangedEvent.OutputTuple,
            VaultAddressChangedEvent.OutputObject
        >;
        VaultAddressChanged: TypedContractEvent<
            VaultAddressChangedEvent.InputTuple,
            VaultAddressChangedEvent.OutputTuple,
            VaultAddressChangedEvent.OutputObject
        >;
    };
}
