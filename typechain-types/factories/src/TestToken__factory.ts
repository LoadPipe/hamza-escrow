/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type { TestToken, TestTokenInterface } from "../../src/TestToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "allowance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientAllowance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "balance",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "needed",
        type: "uint256",
      },
    ],
    name: "ERC20InsufficientBalance",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC20InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC20InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "ERC20InvalidSpender",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200152b3803806200152b833981810160405281019062000037919062000219565b818181600390816200004a9190620004e9565b5080600490816200005c9190620004e9565b5050506200007b67349ec415db651ff860c01b6200008360201b60201c565b5050620005d0565b50565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620000ef82620000a4565b810181811067ffffffffffffffff82111715620001115762000110620000b5565b5b80604052505050565b60006200012662000086565b9050620001348282620000e4565b919050565b600067ffffffffffffffff821115620001575762000156620000b5565b5b6200016282620000a4565b9050602081019050919050565b60005b838110156200018f57808201518184015260208101905062000172565b60008484015250505050565b6000620001b2620001ac8462000139565b6200011a565b905082815260208101848484011115620001d157620001d06200009f565b5b620001de8482856200016f565b509392505050565b600082601f830112620001fe57620001fd6200009a565b5b8151620002108482602086016200019b565b91505092915050565b6000806040838503121562000233576200023262000090565b5b600083015167ffffffffffffffff81111562000254576200025362000095565b5b6200026285828601620001e6565b925050602083015167ffffffffffffffff81111562000286576200028562000095565b5b6200029485828601620001e6565b9150509250929050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620002f157607f821691505b602082108103620003075762000306620002a9565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620003717fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000332565b6200037d868362000332565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620003ca620003c4620003be8462000395565b6200039f565b62000395565b9050919050565b6000819050919050565b620003e683620003a9565b620003fe620003f582620003d1565b8484546200033f565b825550505050565b600090565b6200041562000406565b62000422818484620003db565b505050565b5b818110156200044a576200043e6000826200040b565b60018101905062000428565b5050565b601f821115620004995762000463816200030d565b6200046e8462000322565b810160208510156200047e578190505b620004966200048d8562000322565b83018262000427565b50505b505050565b600082821c905092915050565b6000620004be600019846008026200049e565b1980831691505092915050565b6000620004d98383620004ab565b9150826002028217905092915050565b620004f4826200029e565b67ffffffffffffffff81111562000510576200050f620000b5565b5b6200051c8254620002d8565b620005298282856200044e565b600060209050601f8311600181146200056157600084156200054c578287015190505b620005588582620004cb565b865550620005c8565b601f19841662000571866200030d565b60005b828110156200059b5784890151825560018201915060208501945060208101905062000574565b86831015620005bb5784890151620005b7601f891682620004ab565b8355505b6001600288020188555050505b505050505050565b610f4b80620005e06000396000f3fe608060405234801561001057600080fd5b506004361061009e5760003560e01c806340c10f191161006657806340c10f191461015d57806370a082311461017957806395d89b41146101a9578063a9059cbb146101c7578063dd62ed3e146101f75761009e565b806306fdde03146100a3578063095ea7b3146100c157806318160ddd146100f157806323b872dd1461010f578063313ce5671461013f575b600080fd5b6100ab610227565b6040516100b89190610b9f565b60405180910390f35b6100db60048036038101906100d69190610c5a565b6102b9565b6040516100e89190610cb5565b60405180910390f35b6100f96102dc565b6040516101069190610cdf565b60405180910390f35b61012960048036038101906101249190610cfa565b6102e6565b6040516101369190610cb5565b60405180910390f35b610147610315565b6040516101549190610d69565b60405180910390f35b61017760048036038101906101729190610c5a565b61031e565b005b610193600480360381019061018e9190610d84565b610368565b6040516101a09190610cdf565b60405180910390f35b6101b16103b0565b6040516101be9190610b9f565b60405180910390f35b6101e160048036038101906101dc9190610c5a565b610442565b6040516101ee9190610cb5565b60405180910390f35b610211600480360381019061020c9190610db1565b610465565b60405161021e9190610cdf565b60405180910390f35b60606003805461023690610e20565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610e20565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b6000806102c46104ec565b90506102d18185856104f4565b600191505092915050565b6000600254905090565b6000806102f16104ec565b90506102fe858285610506565b61030985858561059a565b60019150509392505050565b60006012905090565b61033267f51f706c65dad3f460c01b61068e565b6103466772fb1c800ef4999260c01b61068e565b61035a67445beb73b3cd0f5960c01b61068e565b6103648282610691565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600480546103bf90610e20565b80601f01602080910402602001604051908101604052809291908181526020018280546103eb90610e20565b80156104385780601f1061040d57610100808354040283529160200191610438565b820191906000526020600020905b81548152906001019060200180831161041b57829003601f168201915b5050505050905090565b60008061044d6104ec565b905061045a81858561059a565b600191505092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b6105018383836001610713565b505050565b60006105128484610465565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146105945781811015610584578281836040517ffb8f41b200000000000000000000000000000000000000000000000000000000815260040161057b93929190610e60565b60405180910390fd5b61059384848484036000610713565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361060c5760006040517f96c6fd1e0000000000000000000000000000000000000000000000000000000081526004016106039190610e97565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361067e5760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106759190610e97565b60405180910390fd5b6106898383836108ea565b505050565b50565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036107035760006040517fec442f050000000000000000000000000000000000000000000000000000000081526004016106fa9190610e97565b60405180910390fd5b61070f600083836108ea565b5050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036107855760006040517fe602df0500000000000000000000000000000000000000000000000000000000815260040161077c9190610e97565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036107f75760006040517f94280d620000000000000000000000000000000000000000000000000000000081526004016107ee9190610e97565b60405180910390fd5b81600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080156108e4578273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516108db9190610cdf565b60405180910390a35b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361093c5780600260008282546109309190610ee1565b92505081905550610a0f565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156109c8578381836040517fe450d38c0000000000000000000000000000000000000000000000000000000081526004016109bf93929190610e60565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610a585780600260008282540392505081905550610aa5565b806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051610b029190610cdf565b60405180910390a3505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610b49578082015181840152602081019050610b2e565b60008484015250505050565b6000601f19601f8301169050919050565b6000610b7182610b0f565b610b7b8185610b1a565b9350610b8b818560208601610b2b565b610b9481610b55565b840191505092915050565b60006020820190508181036000830152610bb98184610b66565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610bf182610bc6565b9050919050565b610c0181610be6565b8114610c0c57600080fd5b50565b600081359050610c1e81610bf8565b92915050565b6000819050919050565b610c3781610c24565b8114610c4257600080fd5b50565b600081359050610c5481610c2e565b92915050565b60008060408385031215610c7157610c70610bc1565b5b6000610c7f85828601610c0f565b9250506020610c9085828601610c45565b9150509250929050565b60008115159050919050565b610caf81610c9a565b82525050565b6000602082019050610cca6000830184610ca6565b92915050565b610cd981610c24565b82525050565b6000602082019050610cf46000830184610cd0565b92915050565b600080600060608486031215610d1357610d12610bc1565b5b6000610d2186828701610c0f565b9350506020610d3286828701610c0f565b9250506040610d4386828701610c45565b9150509250925092565b600060ff82169050919050565b610d6381610d4d565b82525050565b6000602082019050610d7e6000830184610d5a565b92915050565b600060208284031215610d9a57610d99610bc1565b5b6000610da884828501610c0f565b91505092915050565b60008060408385031215610dc857610dc7610bc1565b5b6000610dd685828601610c0f565b9250506020610de785828601610c0f565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e3857607f821691505b602082108103610e4b57610e4a610df1565b5b50919050565b610e5a81610be6565b82525050565b6000606082019050610e756000830186610e51565b610e826020830185610cd0565b610e8f6040830184610cd0565b949350505050565b6000602082019050610eac6000830184610e51565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610eec82610c24565b9150610ef783610c24565b9250828201905080821115610f0f57610f0e610eb2565b5b9291505056fea2646970667358221220217a261538b47031136960e092ba3389db8530f9a8f676cb45254b5e5ad61c5e64736f6c63430008180033";

type TestTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(name_, symbol_, overrides || {});
  }
  override deploy(
    name_: string,
    symbol_: string,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(name_, symbol_, overrides || {}) as Promise<
      TestToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): TestToken__factory {
    return super.connect(runner) as TestToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): TestToken {
    return new Contract(address, _abi, runner) as unknown as TestToken;
  }
}
