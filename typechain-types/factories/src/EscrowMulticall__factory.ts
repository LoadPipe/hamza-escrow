/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  EscrowMulticall,
  EscrowMulticallInterface,
} from "../../src/EscrowMulticall";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "address",
            name: "contractAddress",
            type: "address",
          },
          {
            internalType: "address",
            name: "currency",
            type: "address",
          },
          {
            internalType: "bytes32",
            name: "id",
            type: "bytes32",
          },
          {
            internalType: "address",
            name: "receiver",
            type: "address",
          },
          {
            internalType: "address",
            name: "payer",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "amount",
            type: "uint256",
          },
        ],
        internalType: "struct MulticallPaymentInput[]",
        name: "payments",
        type: "tuple[]",
      },
    ],
    name: "multipay",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610d27806100206000396000f3fe6080604052600436106100225760003560e01c8063d316ed331461002e57610029565b3661002957005b600080fd5b61004860048036038101906100439190610671565b61004a565b005b60005b828290508110156105f357600083838381811061006d5761006c6106be565b5b905060c0020180360381019061008391906108e8565b905060008160a001519050600073ffffffffffffffffffffffffffffffffffffffff16826020015173ffffffffffffffffffffffffffffffffffffffff16036102d45780341015610109576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161010090610972565b60405180910390fd5b60006040518060a00160405280846020015173ffffffffffffffffffffffffffffffffffffffff16815260200184604001518152602001846060015173ffffffffffffffffffffffffffffffffffffffff168152602001846080015173ffffffffffffffffffffffffffffffffffffffff1681526020018460a0015181525090506000836000015173ffffffffffffffffffffffffffffffffffffffff168460a00151836040516024016101bd9190610a27565b6040516020818303038152906040527f8c6380d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506040516102479190610ab3565b60006040518083038185875af1925050503d8060008114610284576040519150601f19603f3d011682016040523d82523d6000602084013e610289565b606091505b50509050806102cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102c490610b16565b60405180910390fd5b50506105e4565b6000826020015190508073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161031a93929190610b54565b6020604051808303816000875af1158015610339573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061035d9190610bc3565b61039c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161039390610c3c565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1663095ea7b38460000151846040518363ffffffff1660e01b81526004016103db929190610c5c565b6020604051808303816000875af11580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610bc3565b5060006040518060a00160405280856020015173ffffffffffffffffffffffffffffffffffffffff16815260200185604001518152602001856060015173ffffffffffffffffffffffffffffffffffffffff168152602001856080015173ffffffffffffffffffffffffffffffffffffffff1681526020018560a0015181525090506000846000015173ffffffffffffffffffffffffffffffffffffffff166000836040516024016104d09190610a27565b6040516020818303038152906040527f8c6380d1000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161055a9190610ab3565b60006040518083038185875af1925050503d8060008114610597576040519150601f19603f3d011682016040523d82523d6000602084013e61059c565b606091505b50509050806105e0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105d790610cd1565b60405180910390fd5b5050505b5050808060010191505061004d565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126106315761063061060c565b5b8235905067ffffffffffffffff81111561064e5761064d610611565b5b6020830191508360c082028301111561066a57610669610616565b5b9250929050565b6000806020838503121561068857610687610602565b5b600083013567ffffffffffffffff8111156106a6576106a5610607565b5b6106b28582860161061b565b92509250509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61073b826106f2565b810181811067ffffffffffffffff8211171561075a57610759610703565b5b80604052505050565b600061076d6105f8565b90506107798282610732565b919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107a98261077e565b9050919050565b6107b98161079e565b81146107c457600080fd5b50565b6000813590506107d6816107b0565b92915050565b6000819050919050565b6107ef816107dc565b81146107fa57600080fd5b50565b60008135905061080c816107e6565b92915050565b6000819050919050565b61082581610812565b811461083057600080fd5b50565b6000813590506108428161081c565b92915050565b600060c0828403121561085e5761085d6106ed565b5b61086860c0610763565b90506000610878848285016107c7565b600083015250602061088c848285016107c7565b60208301525060406108a0848285016107fd565b60408301525060606108b4848285016107c7565b60608301525060806108c8848285016107c7565b60808301525060a06108dc84828501610833565b60a08301525092915050565b600060c082840312156108fe576108fd610602565b5b600061090c84828501610848565b91505092915050565b600082825260208201905092915050565b7f496e73756666696369656e74416d6f756e740000000000000000000000000000600082015250565b600061095c601283610915565b915061096782610926565b602082019050919050565b6000602082019050818103600083015261098b8161094f565b9050919050565b61099b8161079e565b82525050565b6109aa816107dc565b82525050565b6109b981610812565b82525050565b60a0820160008201516109d56000850182610992565b5060208201516109e860208501826109a1565b5060408201516109fb6040850182610992565b506060820151610a0e6060850182610992565b506080820151610a2160808501826109b0565b50505050565b600060a082019050610a3c60008301846109bf565b92915050565b600081519050919050565b600081905092915050565b60005b83811015610a76578082015181840152602081019050610a5b565b60008484015250505050565b6000610a8d82610a42565b610a978185610a4d565b9350610aa7818560208601610a58565b80840191505092915050565b6000610abf8284610a82565b915081905092915050565b7f5061796d656e744661696c757265000000000000000000000000000000000000600082015250565b6000610b00600e83610915565b9150610b0b82610aca565b602082019050919050565b60006020820190508181036000830152610b2f81610af3565b9050919050565b610b3f8161079e565b82525050565b610b4e81610812565b82525050565b6000606082019050610b696000830186610b36565b610b766020830185610b36565b610b836040830184610b45565b949350505050565b60008115159050919050565b610ba081610b8b565b8114610bab57600080fd5b50565b600081519050610bbd81610b97565b92915050565b600060208284031215610bd957610bd8610602565b5b6000610be784828501610bae565b91505092915050565b7f546f6b656e5472616e736665724661696c656400000000000000000000000000600082015250565b6000610c26601383610915565b9150610c3182610bf0565b602082019050919050565b60006020820190508181036000830152610c5581610c19565b9050919050565b6000604082019050610c716000830185610b36565b610c7e6020830184610b45565b9392505050565b7f546f6b656e5061796d656e744661696c75726500000000000000000000000000600082015250565b6000610cbb601383610915565b9150610cc682610c85565b602082019050919050565b60006020820190508181036000830152610cea81610cae565b905091905056fea264697066735822122032a2fe2eb128c6f186ef7bcdc41ecf2c61e6e6251e03d1ae98e083797987bb5964736f6c63430008180033";

type EscrowMulticallConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EscrowMulticallConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EscrowMulticall__factory extends ContractFactory {
  constructor(...args: EscrowMulticallConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      EscrowMulticall & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): EscrowMulticall__factory {
    return super.connect(runner) as EscrowMulticall__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EscrowMulticallInterface {
    return new Interface(_abi) as EscrowMulticallInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): EscrowMulticall {
    return new Contract(address, _abi, runner) as unknown as EscrowMulticall;
  }
}
