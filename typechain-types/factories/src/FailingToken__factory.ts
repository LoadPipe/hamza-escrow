/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../common";
import type {
  FailingToken,
  FailingTokenInterface,
} from "../../src/FailingToken";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "failTransfers",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "_fail",
        type: "bool",
      },
    ],
    name: "setFailTransfers",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "test",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60806040526040518060400160405280600d81526020017f4661696c696e6720546f6b656e00000000000000000000000000000000000000815250600090816200004a9190620003ab565b506040518060400160405280600481526020017f4641494c0000000000000000000000000000000000000000000000000000000081525060019081620000919190620003ab565b506012600260006101000a81548160ff021916908360ff16021790555069d3c21bcecceda10000006005556000600660006101000a81548160ff021916908315150217905550348015620000e457600080fd5b50600554600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555062000492565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620001b357607f821691505b602082108103620001c957620001c86200016b565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620002337fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620001f4565b6200023f8683620001f4565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006200028c62000286620002808462000257565b62000261565b62000257565b9050919050565b6000819050919050565b620002a8836200026b565b620002c0620002b78262000293565b84845462000201565b825550505050565b600090565b620002d7620002c8565b620002e48184846200029d565b505050565b5b818110156200030c5762000300600082620002cd565b600181019050620002ea565b5050565b601f8211156200035b576200032581620001cf565b6200033084620001e4565b8101602085101562000340578190505b620003586200034f85620001e4565b830182620002e9565b50505b505050565b600082821c905092915050565b6000620003806000198460080262000360565b1980831691505092915050565b60006200039b83836200036d565b9150826002028217905092915050565b620003b68262000131565b67ffffffffffffffff811115620003d257620003d16200013c565b5b620003de82546200019a565b620003eb82828562000310565b600060209050601f8311600181146200042357600084156200040e578287015190505b6200041a85826200038d565b8655506200048a565b601f1984166200043386620001cf565b60005b828110156200045d5784890151825560018201915060208501945060208101905062000436565b868310156200047d578489015162000479601f8916826200036d565b8355505b6001600288020188555050505b505050505050565b610f7580620004a26000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c806370a082311161007157806370a082311461018f57806395d89b41146101bf578063a9059cbb146101dd578063c203b1371461020d578063dd62ed3e1461022b578063f8a8fd6d1461025b576100b4565b806306fdde03146100b9578063095ea7b3146100d757806318160ddd1461010757806323b872dd14610125578063313ce5671461015557806341c4690614610173575b600080fd5b6100c1610265565b6040516100ce9190610ad3565b60405180910390f35b6100f160048036038101906100ec9190610b8e565b6102f3565b6040516100fe9190610be9565b60405180910390f35b61010f6103e5565b60405161011c9190610c13565b60405180910390f35b61013f600480360381019061013a9190610c2e565b6103ef565b60405161014c9190610be9565b60405180910390f35b61015d6106ec565b60405161016a9190610c9d565b60405180910390f35b61018d60048036038101906101889190610ce4565b6106ff565b005b6101a960048036038101906101a49190610d11565b61071c565b6040516101b69190610c13565b60405180910390f35b6101c7610765565b6040516101d49190610ad3565b60405180910390f35b6101f760048036038101906101f29190610b8e565b6107f3565b6040516102049190610be9565b60405180910390f35b6102156109a7565b6040516102229190610be9565b60405180910390f35b61024560048036038101906102409190610d3e565b6109ba565b6040516102529190610c13565b60405180910390f35b610263610a41565b005b6000805461027290610dad565b80601f016020809104026020016040519081016040528092919081815260200182805461029e90610dad565b80156102eb5780601f106102c0576101008083540402835291602001916102eb565b820191906000526020600020905b8154815290600101906020018083116102ce57829003601f168201915b505050505081565b600081600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925846040516103d39190610c13565b60405180910390a36001905092915050565b6000600554905090565b6000600660009054906101000a900460ff161561040f57600090506106e5565b6000600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104ca90610e50565b60405180910390fd5b6000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508381101561055a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055190610ebc565b60405180910390fd5b838203600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550838103600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555083600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106729190610f0b565b925050819055508473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef866040516106d69190610c13565b60405180910390a36001925050505b9392505050565b600260009054906101000a900460ff1681565b80600660006101000a81548160ff02191690831515021790555050565b6000600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6001805461077290610dad565b80601f016020809104026020016040519081016040528092919081815260200182805461079e90610dad565b80156107eb5780601f106107c0576101008083540402835291602001916107eb565b820191906000526020600020905b8154815290600101906020018083116107ce57829003601f168201915b505050505081565b6000600660009054906101000a900460ff161561081357600090506109a1565b6000600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490508281101561089a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161089190610ebc565b60405180910390fd5b828103600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461092f9190610f0b565b925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516109939190610c13565b60405180910390a360019150505b92915050565b600660009054906101000a900460ff1681565b6000600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b565b600081519050919050565b600082825260208201905092915050565b60005b83811015610a7d578082015181840152602081019050610a62565b60008484015250505050565b6000601f19601f8301169050919050565b6000610aa582610a43565b610aaf8185610a4e565b9350610abf818560208601610a5f565b610ac881610a89565b840191505092915050565b60006020820190508181036000830152610aed8184610a9a565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b2582610afa565b9050919050565b610b3581610b1a565b8114610b4057600080fd5b50565b600081359050610b5281610b2c565b92915050565b6000819050919050565b610b6b81610b58565b8114610b7657600080fd5b50565b600081359050610b8881610b62565b92915050565b60008060408385031215610ba557610ba4610af5565b5b6000610bb385828601610b43565b9250506020610bc485828601610b79565b9150509250929050565b60008115159050919050565b610be381610bce565b82525050565b6000602082019050610bfe6000830184610bda565b92915050565b610c0d81610b58565b82525050565b6000602082019050610c286000830184610c04565b92915050565b600080600060608486031215610c4757610c46610af5565b5b6000610c5586828701610b43565b9350506020610c6686828701610b43565b9250506040610c7786828701610b79565b9150509250925092565b600060ff82169050919050565b610c9781610c81565b82525050565b6000602082019050610cb26000830184610c8e565b92915050565b610cc181610bce565b8114610ccc57600080fd5b50565b600081359050610cde81610cb8565b92915050565b600060208284031215610cfa57610cf9610af5565b5b6000610d0884828501610ccf565b91505092915050565b600060208284031215610d2757610d26610af5565b5b6000610d3584828501610b43565b91505092915050565b60008060408385031215610d5557610d54610af5565b5b6000610d6385828601610b43565b9250506020610d7485828601610b43565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610dc557607f821691505b602082108103610dd857610dd7610d7e565b5b50919050565b7f5472616e7366657220616d6f756e74206578636565647320616c6c6f77616e6360008201527f6500000000000000000000000000000000000000000000000000000000000000602082015250565b6000610e3a602183610a4e565b9150610e4582610dde565b604082019050919050565b60006020820190508181036000830152610e6981610e2d565b9050919050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000610ea6601483610a4e565b9150610eb182610e70565b602082019050919050565b60006020820190508181036000830152610ed581610e99565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610f1682610b58565b9150610f2183610b58565b9250828201905080821115610f3957610f38610edc565b5b9291505056fea2646970667358221220e5ac6d98a1b7c1590930db5e1b98265a43ba2d26dc68104ab6d09c1524148c7f64736f6c63430008180033";

type FailingTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FailingTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FailingToken__factory extends ContractFactory {
  constructor(...args: FailingTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      FailingToken & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): FailingToken__factory {
    return super.connect(runner) as FailingToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FailingTokenInterface {
    return new Interface(_abi) as FailingTokenInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): FailingToken {
    return new Contract(address, _abi, runner) as unknown as FailingToken;
  }
}
